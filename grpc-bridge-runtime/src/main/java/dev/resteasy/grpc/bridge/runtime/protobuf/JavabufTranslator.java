/*
 * JBoss, Home of Professional Open Source.
 *
 * Copyright 2025 Red Hat, Inc., and individual contributors
 * as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.resteasy.grpc.bridge.runtime.protobuf;

import java.lang.reflect.Type;

import jakarta.ws.rs.core.GenericType;

import com.google.protobuf.Message;

/**
 * An instance of {@code JavabufTranslator} is generated by
 * {@link dev.resteasy.grpc.bridge.generator.protobuf.JavabufTranslatorGenerator
 * dev.resteasy.grpc.bridge.generator.protobuf.JavabufTranslatorGenerator}.
 * <p>
 * It translates objects back and forth between their Java class and their
 * corresponding javabuf class.
 */
public interface JavabufTranslator {

    /**
     * @return true if and only if ({@code genericType} != null and an object of that type can be translated from javabuf to
     *         Java)
     *         or an object of type {@code clazz} can be translated from javabuf to Java
     */
    boolean handlesFromJavabuf(Type genericType, Class<?> clazz);

    /**
     * @return true if and only if ({@code genericType} != null and an object of that type it can be translated from Java to
     *         javabuf)
     *         or an object of type {@code clazz} can be translated from Java to javabuf
     */
    boolean handlesToJavabuf(Type genericType, Class<?> clazz);

    /**
     * @param {@code message} a {@code com.google.protobuf.Message}
     * @return the Java counterpart of {@code message}
     */
    Object translateFromJavabuf(Message message);

    /**
     * @param {@code o} a Java object
     * @return {@code com.google.protobuf.Message} counterpart of {@code o}
     */
    Message translateToJavabuf(Object o);

    /**
     * @param {@code o} a Java object
     * @param {@code genericType}
     * @return {@code com.google.protobuf.Message} representation of {@code o}
     */
    Message translateToJavabuf(Object o, GenericType genericType);

    /**
     * @param {@code classname} javabuf class
     * @return Java counterpart of {@code classname}
     */
    Class translatefromJavabufClass(String classname);

    /**
     *
     * @param {@code clazz} Java
     * @return javabuf counterpart of {@code clazz}
     */
    Class translateToJavabufClass(Class<?> clazz);

    /**
     *
     * @return name of the {@code <prefix>_proto} class
     */
    String getOuterClassname();

    /**
     *
     * @param {@code genericType} a {@code jakarta.ws.rs.core..GenericType}
     * @return {@code genericType} with open variables and wildcards replaced by {@code Object}
     */
    GenericType<?> normalize(GenericType<?> genericType);

    /**
     *
     * @param {@code type} a {@code java.lang.reflect.Type}
     * @return {@code type} with open variables and wildcards replaced by {@code Object}
     */
    Type normalize(Type type);
}
